# This is the MakoFW Project Makefile.
# Adjust this Makefile to suit your server and project requirements.

# Find the location of this Makefile (this method works with 'make -C', but maybe not with 'make -f'.):
THIS_MAKEFILE=$(CURDIR)/$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))
MAKEFILE_DIR=$(patsubst %/,%,$(dir $(THIS_MAKEFILE)))

# We use the Makefile location to guess our project root:
PROJ_ROOT=${MAKEFILE_DIR}

# The MakoFW location:
MAKOFW_DIR=${PROJ_ROOT}/makofw

# Directory locations:
IN_DIR=${PROJ_ROOT}/input
BUILD_DIR=${PROJ_ROOT}/.build
OUT_DEV_DIR=${PROJ_ROOT}/output/dev
OUT_PROD_DIR=${PROJ_ROOT}/output/prod

# The Python command to use:
PYTHON=python2.7
export PYTHONPATH:=${MAKOFW_DIR}/lib/python:${PYTHONPATH}

# Build Options:
ACL_CHECK=1
AUTO_RM=0

# The port of the development HTTP server:
WWW_PORT=8000


# By default, build the development site without doing ACL checks, and with auto-remove enabled:
# The first two lines are target-specific variables (http://www.gnu.org/software/make/manual/html_node/Target_002dspecific.html).
dev-autorm: ACL_CHECK=0
dev-autorm: AUTO_RM=1
dev-autorm: dev
# Build the development site:
dev: inputToBuild
	MAKOFW_BUILD_MODE=dev ACL_CHECK=${ACL_CHECK} AUTO_RM=${AUTO_RM} ${PYTHON} ${MAKOFW_DIR}/bin/makofw_build "${BUILD_DIR}" "${OUT_DEV_DIR}"

# Automatically remove unexpected files from the production output:
prod-autorm: AUTO_RM=1
prod-autorm: prod
# Build the production site:
prod: inputToBuild
	MAKOFW_BUILD_MODE=prod ACL_CHECK=${ACL_CHECK} AUTO_RM=${AUTO_RM} ${PYTHON} ${MAKOFW_DIR}/bin/makofw_build "${BUILD_DIR}" "${OUT_PROD_DIR}"

# Copy 'input' to 'build' (used internally -- typically not used from the command line):
inputToBuild:
	@echo
	rsync -vaHAX --info=flist0,stats0 ${IN_DIR}/ ${BUILD_DIR}
	@echo

# Touch some critical files that force the whole site to be rebuilt:
touch:
	touch ${IN_DIR}/__init__.tmpl
# Remove the 'build' area:
clean:
	rm -rf ${BUILD_DIR}

# Useful for local development and testing:
devserver:
	cd "${OUT_DEV_DIR}"; ${PYTHON} -m SimpleHTTPServer ${WWW_PORT}
prodserver:
	cd "${OUT_PROD_DIR}"; ${PYTHON} -m SimpleHTTPServer ${WWW_PORT}


