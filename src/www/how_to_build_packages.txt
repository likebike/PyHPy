
#################################################
##  Requires root, but it works:

# Download debootstrap:
wget 'http://ftp.de.debian.org/debian/pool/main/d/debootstrap/debootstrap_1.0.26+squeeze1.tar.gz'
tar zxf debootstrap_*.tar.gz
cd debootstrap 
make devices.tar.gz      # (ignore errors)


# Create a chroot:
export DEBOOTSTRAP_DIR="$(pwd)"
ROOT_DIR="$DEBOOTSTRAP_DIR/ROOT"
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
#./debootstrap --arch i386 natty "$ROOT_DIR"
./debootstrap --arch i386 lucid "$ROOT_DIR"


# Get the nomake start scripts and enter the chroot:
wget -O start http://nomake.org/code/start
chmod a+x start
./start
./run


# Create some basic nomake files:
mkdir /nomake
cat > /nomake/boot.sh <<EOF
#!/bin/bash

echo 'BOOTING CHROOT...'
EOF
chmod a+x /nomake/boot.sh
cat > /nomake/halt.sh <<EOF
#!/bin/bash

echo 'HALTING CHROOT...'
EOF
chmod a+x /nomake/halt.sh



# Install the official Debian keyring so we don't get security warnings while using apt:
# Not needed on LUCID:
apt-get install debian-archive-keyring
apt-get update


# If you are getting errors about locale files missing, Fix locale:
locale
locale-gen en_US.UTF-8


# Install more repos.  Use http://repogen.simplylinux.ch/
vi /etc/apt/sources.list
apt-get update


# tar 1.22 has a huge bug that prevents the chroot from being fully functional
# on older systems, like RHEL 5.5.  Make sure you are using tar.1.23 or later:
tar --version
vi /etc/apt/sources.list
# deb http://us.archive.ubuntu.com/ubuntu/ natty main
apt-get update
apt-get install tar
vi /etc/apt/sources.list
# Comment the natty line
apt-get update


# Done building.
exit
./stop


# Create a backup of the base system:
tar cjf ROOT_base-lucid.tar.bz2 ROOT


#############  Done with base filesystem setup.

#######################################################################

#############  Next: some more basics:
./start
./run


adduser user

# Test:
CHROOT_USER=user ./run

exit
./stop


# Bundle:
mkdir nomake_base
mv ROOT nomake_base/
wget -O nomake_base/start http://nomake.org/code/start
chmod a+x nomake_base/start
./nomake_base/start
./nomake_base/run
exit
./stop

tar cjf nomake_base-lucid.tar.bz2 nomake_base

















































































##############################################################################################
##############################################################################################
##############################  S T O P  #####################################################
##############################################################################################
##############################################################################################



### # (For advanced GUI apps that the host X11 does not support) Install Xephyr
### apt-get install xserver-xephyr
### DISPLAY=:1 Xephyr :2 -ac -screen 640x480 -br -reset -terminate




####    #### NO WORKIE!!!
####
####    Create a virtual machine with Ubuntu 10.04.
####    
####    Add a virtual disk and create a full backup of your system's filesystem (Only need to do this once during system setup):
####    
####        rsync -av / /mnt/origSys/ --exclude /dev --exclude /mnt --exclude /proc --exclude /sys --exclude /var/log
####    
####    Use aptitude to install the app.
####    
####    Use 'rsync' to see the files that have been installed/modified:
####    
####        rsync -nav / /mnt/origSys/ --exclude /dev --exclude /mnt --exclude /proc --exclude /sys --exclude /var/log > fs_diff.txt
####    
####    Edit the fs_diff.txt down to the important lines:
####        1) Get rid of the lines you obviously don't need (like /var/cache/dpkg stuff).
####        2) Get rid of all the directory lines (the lines ending in /).
####        3) Handle symlinks manually... or at least edit the line and take off the '-> ...' stuff.
####        You should be left with something like this:
####    
####        usr/bin/aria2c
####        usr/lib/libcares.so.2.0.0
####        usr/share/doc/aria2/README.gz
####        usr/share/doc/aria2/README.html
####        usr/share/doc/aria2/aria2c.1.html
####    
####    Bundle those files into a chroot (as the normal user, not root).  Use a script like this:
####    
####        #!/bin/bash
####        chrootDir="/home/user/aria2_chroot"
####        while read line; do
####            echo "$line"
####            dstDir="$chrootDir/$(dirname "$line")"
####            echo mkdir -p "$dstDir"
####            echo cd "$dstDir"
####            echo cp "/$line" .
####        done < "$chrootDir/fs_diff.txt"
####    
####    Enter the chroot:
####    
####        asdf
####    
####    List the missing deps:
####    
####        ldd
####    
####    copy them into the chroot:
####    
####        cp asdf
####    
####    Once the app is running, bundle it:
####    
####        tar 
####    
####    
####    
####    
####    
####    
####    
####    
####    
####    
####    
####    
####    
####    
####    
####    
####    
####    
####    
####    
####    
####    
####    
####    # ------  Try again:
####    # This time, configure apt to install into a chroot.
####    
####    
####    # Install prerequisites:
####    apt-get install schroot debootstrap
####    
####    
####    # Create a base system:
####    ROOT_DIR=/nomake
####    mkdir $ROOT_DIR
####    
####    # lucid = Ubuntu 10.04
####    # See other releases here: https://wiki.ubuntu.com/Releases
####    # See the raw mirror directory:  http://mirror.us.leaseweb.net/ubuntu/dists/
####    # Find other mirrors here: https://launchpad.net/ubuntu/+archivemirrors
####    /usr/sbin/debootstrap --arch i386 lucid $ROOT_DIR  http://mirror.us.leaseweb.net/ubuntu/
####    
####    
####    # Create some mounts to the host system:
####    mount -o bind /dev $ROOT_DIR/dev
####    mount -o bind /sys $ROOT_DIR/sys
####    mount -t proc proc $ROOT_DIR/proc
####    
####    
####    # Enter the new base system:
####    LANG=C chroot $ROOT_DIR /bin/bash
####    
####    
####    # Install the run.sh script into the root:
####    apt-get install wget
####    cd / 
####    wget -O run.sh http://dev.nomake.org/run.sh
####    chmod a+x run.sh
####    
####    # Install the app with apt or aptitude.
####    
####    # Exit the chroot.
####    exit
####    
####    # As root, tar up the chroot:
####    tar czf app_name.tar.gz $ROOT_DIR
####    
####    
####    
####    # BUILD / RUN TODO:
####    # Turn dev into symlink.
####    # Turn proc into symlink.
####    # Turn sys into symlink.
####    # run.sh variables should be exported.
####    
####    # Need to auto-generate some files:
####    #   /etc/resolve.conf
####    
####    
####    
####    
####    
####    
####    #############  Using fakechroot and fakeroot:
####    
####    
####    export DEBOOTSTRAP_DIR=/local/fake/.src/debootstrap
####    /local/fake/bin/fakechroot /local/fake/bin/fakeroot /local/fake/.src/debootstrap/debootstrap --arch i386 --variant=fakechroot lucid /local/fake/LUCID
####    
####    
####    
####    # Here's my fucking script that doesn't do shit:
####    
####    #!/bin/bash
####    #
####    # The real 'fakechroot' is more complex than i need... AND it gets it wrong!
####    #
####    # Use like this:
####    #     sebFakechroot /path/to/root command args...
####    
####    
####    # Stop this script if an error occurs:
####    set -o errexit
####    set -o nounset
####    
####    
####    export FAKECHROOT_BASE=$1
####    shift
####    
####    
####    MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
####    
####    LIB_SRC_DIR=$MYDIR/../lib/fakechroot
####    LIB_SRC=$LIB_SRC_DIR/libfakechroot.so
####    LIB_DST_DIR=$FAKECHROOT_BASE/lib/fakechroot
####    LIB_DST=$LIB_DST_DIR/libfakechroot.so
####    
####    #cp "$LIB_SRC" "$LIB_DST"
####    
####    export LD_LIBRARY_PATH=$LIB_SRC_DIR:$LIB_DST_DIR
####    export LD_PRELOAD=$LIB_SRC
####    
####    export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/bin/X11
####    export FAKECHROOT_CMD_SUBST=/sbin/insserv=/bin/true:/sbin/ldconfig=/bin/true:/usr/bin/ischroot=/bin/true:/usr/bin/ldd=/usr/bin/ldd.fakechroot:/usr/bin/mkfifo=/bin/true
####    
####    set +o errexit
####    "$@"
####    result=$?
####    exit $result
####    
####    
####    












