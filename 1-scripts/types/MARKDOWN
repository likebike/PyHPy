#!/usr/bin/env python

import sys, os, codecs
import pyhpy.sync


# I need to use a slightly convoluted method to produce nice results:
# We are given an x.md file.
# First, we generate an _mdParent_x.mako, which inherits from meta['inherit'] and also applies a markdown filter to the child template's body.
# Next, x.md file gets turned into x.mako, which inherits from _mdParent_x.mako.
# This enables us to use standard Mako operations (like <%def> that behave as expected) inside of x.md.
#
# Before using this method, I tried two other approaches:
#   * Running a markdown filter before giving the results to mako.  This worked "OK" but was a huge pain in the ass whenever you actually needed to use mako features, due to Markdown messing with your code.
#   * Just using one mako template (instead of the current two) with a <%block filter="pyhpy.markdown">.  This sort of works, but the <%block> layer changes the standard Mako behavior and prevents you from using <%def> naturally.



def markdownToMako(IN_DIR, REL_PATH):
    mdPath = os.path.join(IN_DIR, REL_PATH)
    base, ext = os.path.splitext(REL_PATH)
    assert base  and  ext.lower() in ['.md', '.markdown']
    reldir, filebase = os.path.split(base)
    childTmplPath = os.path.join(IN_DIR, base+'.mako')

    # Step 1: Meta
    # If our x.md file has a x.md.meta, copy it to x.mako.meta so that our template code can always assume that the meta is available from pyhpy.meta(self.uri):
    mdMetaPath = mdPath+'.meta'
    if os.path.exists(mdMetaPath): pyhpy.sync.syncFileOrSymlink(mdMetaPath, childTmplPath+'.meta')

    # Step 2: The Parent Template:
    parentTmplFilename = '_mdParent_'+filebase+'.mako'
    parentTmplRelPath = os.path.join(reldir, parentTmplFilename)
    parentTmplPath = os.path.join(IN_DIR, parentTmplRelPath)
    pTmpl = u'## DO NOT EDIT THIS FILE; Your changes will be lost!  This file is auto-generated from %r;  Edit that instead.\n'%(mdPath,)
    meta = pyhpy.meta(mdPath)
    if meta['inherit']: pTmpl += u'<%%inherit file="%s" />\\\n'%(meta['inherit'],)
    pTmpl += u'<%! import pyhpy %>\\\n'
    pTmpl += u'${capture(next.body) | pyhpy.markdown}'
    pyhpy.sync.syncData(pTmpl, parentTmplPath)

    # Step 3: The Child Template:
    cTmpl = u'## DO NOT EDIT THIS FILE; Your changes will be lost!  This file is auto-generated from %r;  Edit that instead.\n'%(mdPath,)
    cTmpl += u'<%%inherit file="/%s" />\\\n'%(parentTmplRelPath,)
    cTmpl += codecs.open(mdPath, encoding='utf-8').read()
    pyhpy.sync.syncData(cTmpl, childTmplPath)


if __name__ == '__main__':
    # Example command-line args:  /home/user/mysite/3_build  /home/user/mysite/4_output/dev  blog/post1.html.md
    IN_DIR = sys.argv[1]
    OUT_DIR = sys.argv[2]    # We don't actually use this.  We write to the IN_DIR instead and hope the build system notices...
    REL_PATH = sys.argv[3]
    markdownToMako(IN_DIR, REL_PATH)



