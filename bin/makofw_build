#!/usr/bin/env python

# This script publishes the input directory to the output directory in an intelligent
# way.  Copies file data & permissions & ACLs, evaluates Mako templates, ignores
# hidden files, and notifies the user of files that are in the 'output' area that
# probably shouldn't be there.
#
# Written by Christopher Sebastian, 2011-11-04

import os, sys, json, codecs
import makofw
import makofw.sync

DOT_FILES_THAT_ARE_NOT_HIDDEN=['.htaccess']  # Dot files that we actually want
                                             # to copy.
EXTENSIONS_TO_IGNORE=['.swp', '.pyc', '.meta']

def isHiddenFile(filename):
    base, ext = os.path.splitext(filename)
    ext = ext.lower()
    if ext in EXTENSIONS_TO_IGNORE: return True
    for n in DOT_FILES_THAT_ARE_NOT_HIDDEN:
        if filename.startswith(n): return False  ## I use 'startswith' instead of '==' to handle backups of sensitive files, such as '.htaccess.bak'
    if filename[0] in '_.': return True
    if filename[-1] in '~': return True
    return False


def normalFileHandler(data, DST_DIR, okDstFiles):
    dstPath = os.path.join(DST_DIR, data['relPath'])
    makofw.sync.syncNormalFile(data['absPath'], dstPath)
    okDstFiles.append(dstPath)
def hiddenFileHandler(data, DST_DIR, okDstFiles):
    #print 'Skipping hidden file:',data['urlPath']
    pass
def symlinkHandler(data, DST_DIR, okDstFiles):
    dstPath = os.path.join(DST_DIR, data['relPath'])
    makofw.sync.syncSymlink(data['absPath'], dstPath)
    okDstFiles.append(dstPath)
def makoFileHandler(data, DST_DIR, okDstFiles):
    relBase, relExt = os.path.splitext(data['relPath'])
    assert relExt in ['.tmpl', '.mako']
    dstPath = os.path.join(DST_DIR, relBase)
    makofw.sync.syncMakoTemplate(data['absPath'], dstPath)
    okDstFiles.append(dstPath)        
def markdownFileHandler(data, DST_DIR, okDstFiles):
    base, ext = os.path.splitext(data['absPath'])
    assert ext in ['.md', '.markdown']
    tmplPath = base+'.tmpl'
    tmplMTime = makofw.getmtime(tmplPath, noExistTime=-1)
    if data['mtime'] > tmplMTime:
        metaPath = data['absPath']+'.meta'
        if os.path.exists(metaPath): makofw.sync.cpData(metaPath, tmplPath+'.meta')
        tmpl = "## DO NOT EDIT THIS FILE; Your changes will be lost!  This is auto-generated from '%s';  Edit that instead.\n"%(data['absPath'],)
        meta = makofw.meta(data['absPath'])
        if meta['inherit']: tmpl += '<%%inherit file="%s"/>\\\n'%(meta['inherit'],)
        tmpl += makofw.markdown(codecs.open(data['absPath'], encoding='utf-8').read(), allow_anglebracket_escape=True)
        outFile = codecs.open(tmplPath, 'wb', encoding='utf-8')
        outFile.write(tmpl)
        outFile.close()
        newData = {'rootDir':data['rootDir'],
                   'absPath':tmplPath,
                   'relPath':tmplPath[len(data['rootDir'])+1:],
                   'mtime':data['mtime'],
        }
        assert newData['relPath']
        makoFileHandler(newData, DST_DIR, okDstFiles)

def walkAndClassify(rootDir):
    results = {}
    for dirpath, dirnames, filenames, symlinks in makofw.sync.walk(rootDir):
        for dirname in list(dirnames):
            if isHiddenFile(dirname): dirnames.remove(dirname)
        for filename in (filenames+symlinks):
            absPath = os.path.join(dirpath, filename)
            assert absPath.startswith(rootDir)
            relPath = absPath[len(rootDir):]  # Path relative to rootDir.  /path/to/root/a/b/c becomes a/b/c
            assert relPath[0] == os.sep
            relPath = relPath[1:]
            assert relPath
            data = {'rootDir':rootDir,
                    'absPath':absPath,
                    'relPath':relPath,
                    'mtime':makofw.getmtime(absPath),
                   }
            
            _, ext = os.path.splitext(absPath)
            if isHiddenFile(os.path.basename(absPath)):
                data['handler'] = hiddenFileHandler
            elif ext.lower() in ['.tmpl', '.mako']: data['handler'] = makoFileHandler
            elif ext.lower() in ['.md', '.markdown']: data['handler'] = markdownFileHandler
            elif os.path.islink(absPath): data['handler'] = symlinkHandler
            else: data['handler'] = normalFileHandler
            results[relPath] = data
    return results
    
def build(SRC_DIR, DST_DIR):
    okDstFiles = []
    processed, toProcess = {}, walkAndClassify(SRC_DIR)    # A simple way to support auto-generation of files/templates.  (Loop until the filesystem is stable.)
    while sorted(processed) != sorted(toProcess):
        okDstFiles = []
        for urlPath,data in sorted(toProcess.items()): data['handler'](data, DST_DIR, okDstFiles)
        processed, toProcess = toProcess, walkAndClassify(SRC_DIR)
    unexpectedDstFiles = []
    for dirpath, dirnames, filenames, symlinks in makofw.sync.walk(DST_DIR):
        for filename in (filenames+symlinks):
            absPath = os.path.join(dirpath, filename)
            if absPath not in okDstFiles:
                unexpectedDstFiles.append(absPath)
    return processed, unexpectedDstFiles

def main(SRC_DIR, DST_DIR):
    processed, unexpectedDstFiles = build(SRC_DIR, DST_DIR)
    for f in unexpectedDstFiles:
        if int(os.environ.get('AUTO_RM', '0')) == 1:
            print 'Auto-Removing:',f
            os.unlink(f)
        else: print 'Unexpected file in output:',f


if __name__ == '__main__':
    assert len(sys.argv) == 3
    _SRC_DIR=sys.argv[1]
    _DST_DIR=sys.argv[2]

    # print 'SRC_DIR =',_SRC_DIR
    # print 'DST_DIR =',_DST_DIR
    # print 'ACL_CHECK =',os.environ.get('ACL_CHECK', 1)
        
    main(_SRC_DIR, _DST_DIR)

